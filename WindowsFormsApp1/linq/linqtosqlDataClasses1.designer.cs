#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApp1.linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Deliever")]
	public partial class linqtosqlDataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertDeliever(Deliever instance);
    partial void UpdateDeliever(Deliever instance);
    partial void DeleteDeliever(Deliever instance);
    partial void InsertDelieverGoods(DelieverGoods instance);
    partial void UpdateDelieverGoods(DelieverGoods instance);
    partial void DeleteDelieverGoods(DelieverGoods instance);
    partial void InsertRealReportary(RealReportary instance);
    partial void UpdateRealReportary(RealReportary instance);
    partial void DeleteRealReportary(RealReportary instance);
    partial void InsertRealReportaryGoods(RealReportaryGoods instance);
    partial void UpdateRealReportaryGoods(RealReportaryGoods instance);
    partial void DeleteRealReportaryGoods(RealReportaryGoods instance);
    partial void InsertSubDeliever(SubDeliever instance);
    partial void UpdateSubDeliever(SubDeliever instance);
    partial void DeleteSubDeliever(SubDeliever instance);
    partial void InsertSubDeliverGoods(SubDeliverGoods instance);
    partial void UpdateSubDeliverGoods(SubDeliverGoods instance);
    partial void DeleteSubDeliverGoods(SubDeliverGoods instance);
    partial void InsertTranReporatoryGoods(TranReporatoryGoods instance);
    partial void UpdateTranReporatoryGoods(TranReporatoryGoods instance);
    partial void DeleteTranReporatoryGoods(TranReporatoryGoods instance);
    partial void InsertTransReporatory(TransReporatory instance);
    partial void UpdateTransReporatory(TransReporatory instance);
    partial void DeleteTransReporatory(TransReporatory instance);
    partial void InsertGoods(Goods instance);
    partial void UpdateGoods(Goods instance);
    partial void DeleteGoods(Goods instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    #endregion
		
		public linqtosqlDataClasses1DataContext() : 
				base(global::WindowsFormsApp1.Properties.Settings.Default.DelieverConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public linqtosqlDataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public linqtosqlDataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public linqtosqlDataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public linqtosqlDataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Deliever> Deliever
		{
			get
			{
				return this.GetTable<Deliever>();
			}
		}
		
		public System.Data.Linq.Table<DelieverGoods> DelieverGoods
		{
			get
			{
				return this.GetTable<DelieverGoods>();
			}
		}
		
		public System.Data.Linq.Table<RealReportary> RealReportary
		{
			get
			{
				return this.GetTable<RealReportary>();
			}
		}
		
		public System.Data.Linq.Table<RealReportaryGoods> RealReportaryGoods
		{
			get
			{
				return this.GetTable<RealReportaryGoods>();
			}
		}
		
		public System.Data.Linq.Table<SubDeliever> SubDeliever
		{
			get
			{
				return this.GetTable<SubDeliever>();
			}
		}
		
		public System.Data.Linq.Table<SubDeliverGoods> SubDeliverGoods
		{
			get
			{
				return this.GetTable<SubDeliverGoods>();
			}
		}
		
		public System.Data.Linq.Table<TranReporatoryGoods> TranReporatoryGoods
		{
			get
			{
				return this.GetTable<TranReporatoryGoods>();
			}
		}
		
		public System.Data.Linq.Table<TransReporatory> TransReporatory
		{
			get
			{
				return this.GetTable<TransReporatory>();
			}
		}
		
		public System.Data.Linq.Table<Goods> Goods
		{
			get
			{
				return this.GetTable<Goods>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employee
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Deliever")]
	public partial class Deliever : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DelieverID;
		
		private System.Nullable<int> _DelieverStartReporatoryID;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<int> _DelieverDestinationReporatoryID;
		
		private int _HaveSubDelievers;
		
		private int _DelieverStatus;
		
		private System.Nullable<System.DateTime> _DelieverCreateDate;
		
		private System.Nullable<System.DateTime> _DelieverCompletedDate;
		
		private string _DelieverTransferReporatory;
		
		private EntitySet<DelieverGoods> _DelieverGoods;
		
		private EntitySet<SubDeliever> _SubDeliever;
		
		private EntitySet<TranReporatoryGoods> _TranReporatoryGoods;
		
		private EntityRef<TransReporatory> _TransReporatory;
		
		private EntityRef<TransReporatory> _TransReporatory1;
		
		private EntityRef<Employee> _Employee;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDelieverIDChanging(int value);
    partial void OnDelieverIDChanged();
    partial void OnDelieverStartReporatoryIDChanging(System.Nullable<int> value);
    partial void OnDelieverStartReporatoryIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnDelieverDestinationReporatoryIDChanging(System.Nullable<int> value);
    partial void OnDelieverDestinationReporatoryIDChanged();
    partial void OnHaveSubDelieversChanging(int value);
    partial void OnHaveSubDelieversChanged();
    partial void OnDelieverStatusChanging(int value);
    partial void OnDelieverStatusChanged();
    partial void OnDelieverCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDelieverCreateDateChanged();
    partial void OnDelieverCompletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDelieverCompletedDateChanged();
    partial void OnDelieverTransferReporatoryChanging(string value);
    partial void OnDelieverTransferReporatoryChanged();
    #endregion
		
		public Deliever()
		{
			this._DelieverGoods = new EntitySet<DelieverGoods>(new Action<DelieverGoods>(this.attach_DelieverGoods), new Action<DelieverGoods>(this.detach_DelieverGoods));
			this._SubDeliever = new EntitySet<SubDeliever>(new Action<SubDeliever>(this.attach_SubDeliever), new Action<SubDeliever>(this.detach_SubDeliever));
			this._TranReporatoryGoods = new EntitySet<TranReporatoryGoods>(new Action<TranReporatoryGoods>(this.attach_TranReporatoryGoods), new Action<TranReporatoryGoods>(this.detach_TranReporatoryGoods));
			this._TransReporatory = default(EntityRef<TransReporatory>);
			this._TransReporatory1 = default(EntityRef<TransReporatory>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelieverID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DelieverID
		{
			get
			{
				return this._DelieverID;
			}
			set
			{
				if ((this._DelieverID != value))
				{
					this.OnDelieverIDChanging(value);
					this.SendPropertyChanging();
					this._DelieverID = value;
					this.SendPropertyChanged("DelieverID");
					this.OnDelieverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelieverStartReporatoryID", DbType="Int")]
		public System.Nullable<int> DelieverStartReporatoryID
		{
			get
			{
				return this._DelieverStartReporatoryID;
			}
			set
			{
				if ((this._DelieverStartReporatoryID != value))
				{
					if (this._TransReporatory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDelieverStartReporatoryIDChanging(value);
					this.SendPropertyChanging();
					this._DelieverStartReporatoryID = value;
					this.SendPropertyChanged("DelieverStartReporatoryID");
					this.OnDelieverStartReporatoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelieverDestinationReporatoryID", DbType="Int")]
		public System.Nullable<int> DelieverDestinationReporatoryID
		{
			get
			{
				return this._DelieverDestinationReporatoryID;
			}
			set
			{
				if ((this._DelieverDestinationReporatoryID != value))
				{
					if (this._TransReporatory1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDelieverDestinationReporatoryIDChanging(value);
					this.SendPropertyChanging();
					this._DelieverDestinationReporatoryID = value;
					this.SendPropertyChanged("DelieverDestinationReporatoryID");
					this.OnDelieverDestinationReporatoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HaveSubDelievers", DbType="Int NOT NULL")]
		public int HaveSubDelievers
		{
			get
			{
				return this._HaveSubDelievers;
			}
			set
			{
				if ((this._HaveSubDelievers != value))
				{
					this.OnHaveSubDelieversChanging(value);
					this.SendPropertyChanging();
					this._HaveSubDelievers = value;
					this.SendPropertyChanged("HaveSubDelievers");
					this.OnHaveSubDelieversChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelieverStatus", DbType="Int NOT NULL")]
		public int DelieverStatus
		{
			get
			{
				return this._DelieverStatus;
			}
			set
			{
				if ((this._DelieverStatus != value))
				{
					this.OnDelieverStatusChanging(value);
					this.SendPropertyChanging();
					this._DelieverStatus = value;
					this.SendPropertyChanged("DelieverStatus");
					this.OnDelieverStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelieverCreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DelieverCreateDate
		{
			get
			{
				return this._DelieverCreateDate;
			}
			set
			{
				if ((this._DelieverCreateDate != value))
				{
					this.OnDelieverCreateDateChanging(value);
					this.SendPropertyChanging();
					this._DelieverCreateDate = value;
					this.SendPropertyChanged("DelieverCreateDate");
					this.OnDelieverCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelieverCompletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DelieverCompletedDate
		{
			get
			{
				return this._DelieverCompletedDate;
			}
			set
			{
				if ((this._DelieverCompletedDate != value))
				{
					this.OnDelieverCompletedDateChanging(value);
					this.SendPropertyChanging();
					this._DelieverCompletedDate = value;
					this.SendPropertyChanged("DelieverCompletedDate");
					this.OnDelieverCompletedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelieverTransferReporatory", DbType="VarChar(100)")]
		public string DelieverTransferReporatory
		{
			get
			{
				return this._DelieverTransferReporatory;
			}
			set
			{
				if ((this._DelieverTransferReporatory != value))
				{
					this.OnDelieverTransferReporatoryChanging(value);
					this.SendPropertyChanging();
					this._DelieverTransferReporatory = value;
					this.SendPropertyChanged("DelieverTransferReporatory");
					this.OnDelieverTransferReporatoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Deliever_DelieverGoods", Storage="_DelieverGoods", ThisKey="DelieverID", OtherKey="DelieverID")]
		public EntitySet<DelieverGoods> DelieverGoods
		{
			get
			{
				return this._DelieverGoods;
			}
			set
			{
				this._DelieverGoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Deliever_SubDeliever", Storage="_SubDeliever", ThisKey="DelieverID", OtherKey="DelieverID")]
		public EntitySet<SubDeliever> SubDeliever
		{
			get
			{
				return this._SubDeliever;
			}
			set
			{
				this._SubDeliever.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Deliever_TranReporatoryGoods", Storage="_TranReporatoryGoods", ThisKey="DelieverID", OtherKey="DelieverID")]
		public EntitySet<TranReporatoryGoods> TranReporatoryGoods
		{
			get
			{
				return this._TranReporatoryGoods;
			}
			set
			{
				this._TranReporatoryGoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransReporatory_Deliever", Storage="_TransReporatory", ThisKey="DelieverStartReporatoryID", OtherKey="TransReporatoryID", IsForeignKey=true)]
		public TransReporatory TransReporatory
		{
			get
			{
				return this._TransReporatory.Entity;
			}
			set
			{
				TransReporatory previousValue = this._TransReporatory.Entity;
				if (((previousValue != value) 
							|| (this._TransReporatory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransReporatory.Entity = null;
						previousValue.Deliever.Remove(this);
					}
					this._TransReporatory.Entity = value;
					if ((value != null))
					{
						value.Deliever.Add(this);
						this._DelieverStartReporatoryID = value.TransReporatoryID;
					}
					else
					{
						this._DelieverStartReporatoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TransReporatory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransReporatory_Deliever1", Storage="_TransReporatory1", ThisKey="DelieverDestinationReporatoryID", OtherKey="TransReporatoryID", IsForeignKey=true)]
		public TransReporatory TransReporatory1
		{
			get
			{
				return this._TransReporatory1.Entity;
			}
			set
			{
				TransReporatory previousValue = this._TransReporatory1.Entity;
				if (((previousValue != value) 
							|| (this._TransReporatory1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransReporatory1.Entity = null;
						previousValue.Deliever1.Remove(this);
					}
					this._TransReporatory1.Entity = value;
					if ((value != null))
					{
						value.Deliever1.Add(this);
						this._DelieverDestinationReporatoryID = value.TransReporatoryID;
					}
					else
					{
						this._DelieverDestinationReporatoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TransReporatory1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Deliever", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Deliever.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Deliever.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DelieverGoods(DelieverGoods entity)
		{
			this.SendPropertyChanging();
			entity.Deliever = this;
		}
		
		private void detach_DelieverGoods(DelieverGoods entity)
		{
			this.SendPropertyChanging();
			entity.Deliever = null;
		}
		
		private void attach_SubDeliever(SubDeliever entity)
		{
			this.SendPropertyChanging();
			entity.Deliever = this;
		}
		
		private void detach_SubDeliever(SubDeliever entity)
		{
			this.SendPropertyChanging();
			entity.Deliever = null;
		}
		
		private void attach_TranReporatoryGoods(TranReporatoryGoods entity)
		{
			this.SendPropertyChanging();
			entity.Deliever = this;
		}
		
		private void detach_TranReporatoryGoods(TranReporatoryGoods entity)
		{
			this.SendPropertyChanging();
			entity.Deliever = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DelieverGoods")]
	public partial class DelieverGoods : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GoodsID;
		
		private int _DelieverID;
		
		private int _DelieverTotalNumber;
		
		private int _DelieverGoodsID;
		
		private EntityRef<Deliever> _Deliever;
		
		private EntityRef<Goods> _Goods;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGoodsIDChanging(int value);
    partial void OnGoodsIDChanged();
    partial void OnDelieverIDChanging(int value);
    partial void OnDelieverIDChanged();
    partial void OnDelieverTotalNumberChanging(int value);
    partial void OnDelieverTotalNumberChanged();
    partial void OnDelieverGoodsIDChanging(int value);
    partial void OnDelieverGoodsIDChanged();
    #endregion
		
		public DelieverGoods()
		{
			this._Deliever = default(EntityRef<Deliever>);
			this._Goods = default(EntityRef<Goods>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodsID", DbType="Int NOT NULL")]
		public int GoodsID
		{
			get
			{
				return this._GoodsID;
			}
			set
			{
				if ((this._GoodsID != value))
				{
					if (this._Goods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodsIDChanging(value);
					this.SendPropertyChanging();
					this._GoodsID = value;
					this.SendPropertyChanged("GoodsID");
					this.OnGoodsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelieverID", DbType="Int NOT NULL")]
		public int DelieverID
		{
			get
			{
				return this._DelieverID;
			}
			set
			{
				if ((this._DelieverID != value))
				{
					if (this._Deliever.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDelieverIDChanging(value);
					this.SendPropertyChanging();
					this._DelieverID = value;
					this.SendPropertyChanged("DelieverID");
					this.OnDelieverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelieverTotalNumber", DbType="Int NOT NULL")]
		public int DelieverTotalNumber
		{
			get
			{
				return this._DelieverTotalNumber;
			}
			set
			{
				if ((this._DelieverTotalNumber != value))
				{
					this.OnDelieverTotalNumberChanging(value);
					this.SendPropertyChanging();
					this._DelieverTotalNumber = value;
					this.SendPropertyChanged("DelieverTotalNumber");
					this.OnDelieverTotalNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelieverGoodsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DelieverGoodsID
		{
			get
			{
				return this._DelieverGoodsID;
			}
			set
			{
				if ((this._DelieverGoodsID != value))
				{
					this.OnDelieverGoodsIDChanging(value);
					this.SendPropertyChanging();
					this._DelieverGoodsID = value;
					this.SendPropertyChanged("DelieverGoodsID");
					this.OnDelieverGoodsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Deliever_DelieverGoods", Storage="_Deliever", ThisKey="DelieverID", OtherKey="DelieverID", IsForeignKey=true)]
		public Deliever Deliever
		{
			get
			{
				return this._Deliever.Entity;
			}
			set
			{
				Deliever previousValue = this._Deliever.Entity;
				if (((previousValue != value) 
							|| (this._Deliever.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Deliever.Entity = null;
						previousValue.DelieverGoods.Remove(this);
					}
					this._Deliever.Entity = value;
					if ((value != null))
					{
						value.DelieverGoods.Add(this);
						this._DelieverID = value.DelieverID;
					}
					else
					{
						this._DelieverID = default(int);
					}
					this.SendPropertyChanged("Deliever");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Goods_DelieverGoods", Storage="_Goods", ThisKey="GoodsID", OtherKey="GoodsID", IsForeignKey=true)]
		public Goods Goods
		{
			get
			{
				return this._Goods.Entity;
			}
			set
			{
				Goods previousValue = this._Goods.Entity;
				if (((previousValue != value) 
							|| (this._Goods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Goods.Entity = null;
						previousValue.DelieverGoods.Remove(this);
					}
					this._Goods.Entity = value;
					if ((value != null))
					{
						value.DelieverGoods.Add(this);
						this._GoodsID = value.GoodsID;
					}
					else
					{
						this._GoodsID = default(int);
					}
					this.SendPropertyChanged("Goods");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RealReportary")]
	public partial class RealReportary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RealReportaryID;
		
		private string _RealReportaryCode;
		
		private string _RealReportaryName;
		
		private string _RealReportaryCity;
		
		private EntitySet<RealReportaryGoods> _RealReportaryGoods;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRealReportaryIDChanging(int value);
    partial void OnRealReportaryIDChanged();
    partial void OnRealReportaryCodeChanging(string value);
    partial void OnRealReportaryCodeChanged();
    partial void OnRealReportaryNameChanging(string value);
    partial void OnRealReportaryNameChanged();
    partial void OnRealReportaryCityChanging(string value);
    partial void OnRealReportaryCityChanged();
    #endregion
		
		public RealReportary()
		{
			this._RealReportaryGoods = new EntitySet<RealReportaryGoods>(new Action<RealReportaryGoods>(this.attach_RealReportaryGoods), new Action<RealReportaryGoods>(this.detach_RealReportaryGoods));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealReportaryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RealReportaryID
		{
			get
			{
				return this._RealReportaryID;
			}
			set
			{
				if ((this._RealReportaryID != value))
				{
					this.OnRealReportaryIDChanging(value);
					this.SendPropertyChanging();
					this._RealReportaryID = value;
					this.SendPropertyChanged("RealReportaryID");
					this.OnRealReportaryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealReportaryCode", DbType="Char(10)")]
		public string RealReportaryCode
		{
			get
			{
				return this._RealReportaryCode;
			}
			set
			{
				if ((this._RealReportaryCode != value))
				{
					this.OnRealReportaryCodeChanging(value);
					this.SendPropertyChanging();
					this._RealReportaryCode = value;
					this.SendPropertyChanged("RealReportaryCode");
					this.OnRealReportaryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealReportaryName", DbType="VarChar(20)")]
		public string RealReportaryName
		{
			get
			{
				return this._RealReportaryName;
			}
			set
			{
				if ((this._RealReportaryName != value))
				{
					this.OnRealReportaryNameChanging(value);
					this.SendPropertyChanging();
					this._RealReportaryName = value;
					this.SendPropertyChanged("RealReportaryName");
					this.OnRealReportaryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealReportaryCity", DbType="VarChar(20)")]
		public string RealReportaryCity
		{
			get
			{
				return this._RealReportaryCity;
			}
			set
			{
				if ((this._RealReportaryCity != value))
				{
					this.OnRealReportaryCityChanging(value);
					this.SendPropertyChanging();
					this._RealReportaryCity = value;
					this.SendPropertyChanged("RealReportaryCity");
					this.OnRealReportaryCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RealReportary_RealReportaryGoods", Storage="_RealReportaryGoods", ThisKey="RealReportaryID", OtherKey="RealReportaryID")]
		public EntitySet<RealReportaryGoods> RealReportaryGoods
		{
			get
			{
				return this._RealReportaryGoods;
			}
			set
			{
				this._RealReportaryGoods.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RealReportaryGoods(RealReportaryGoods entity)
		{
			this.SendPropertyChanging();
			entity.RealReportary = this;
		}
		
		private void detach_RealReportaryGoods(RealReportaryGoods entity)
		{
			this.SendPropertyChanging();
			entity.RealReportary = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RealReportaryGoods")]
	public partial class RealReportaryGoods : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RealReportaryID;
		
		private int _GoodsID;
		
		private int _RealReportaryGoodsID;
		
		private System.Nullable<int> _RealNumber;
		
		private EntityRef<RealReportary> _RealReportary;
		
		private EntityRef<Goods> _Goods;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRealReportaryIDChanging(int value);
    partial void OnRealReportaryIDChanged();
    partial void OnGoodsIDChanging(int value);
    partial void OnGoodsIDChanged();
    partial void OnRealReportaryGoodsIDChanging(int value);
    partial void OnRealReportaryGoodsIDChanged();
    partial void OnRealNumberChanging(System.Nullable<int> value);
    partial void OnRealNumberChanged();
    #endregion
		
		public RealReportaryGoods()
		{
			this._RealReportary = default(EntityRef<RealReportary>);
			this._Goods = default(EntityRef<Goods>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealReportaryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RealReportaryID
		{
			get
			{
				return this._RealReportaryID;
			}
			set
			{
				if ((this._RealReportaryID != value))
				{
					if (this._RealReportary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRealReportaryIDChanging(value);
					this.SendPropertyChanging();
					this._RealReportaryID = value;
					this.SendPropertyChanged("RealReportaryID");
					this.OnRealReportaryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GoodsID
		{
			get
			{
				return this._GoodsID;
			}
			set
			{
				if ((this._GoodsID != value))
				{
					if (this._Goods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodsIDChanging(value);
					this.SendPropertyChanging();
					this._GoodsID = value;
					this.SendPropertyChanged("GoodsID");
					this.OnGoodsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealReportaryGoodsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RealReportaryGoodsID
		{
			get
			{
				return this._RealReportaryGoodsID;
			}
			set
			{
				if ((this._RealReportaryGoodsID != value))
				{
					this.OnRealReportaryGoodsIDChanging(value);
					this.SendPropertyChanging();
					this._RealReportaryGoodsID = value;
					this.SendPropertyChanged("RealReportaryGoodsID");
					this.OnRealReportaryGoodsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealNumber", DbType="Int")]
		public System.Nullable<int> RealNumber
		{
			get
			{
				return this._RealNumber;
			}
			set
			{
				if ((this._RealNumber != value))
				{
					this.OnRealNumberChanging(value);
					this.SendPropertyChanging();
					this._RealNumber = value;
					this.SendPropertyChanged("RealNumber");
					this.OnRealNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RealReportary_RealReportaryGoods", Storage="_RealReportary", ThisKey="RealReportaryID", OtherKey="RealReportaryID", IsForeignKey=true)]
		public RealReportary RealReportary
		{
			get
			{
				return this._RealReportary.Entity;
			}
			set
			{
				RealReportary previousValue = this._RealReportary.Entity;
				if (((previousValue != value) 
							|| (this._RealReportary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RealReportary.Entity = null;
						previousValue.RealReportaryGoods.Remove(this);
					}
					this._RealReportary.Entity = value;
					if ((value != null))
					{
						value.RealReportaryGoods.Add(this);
						this._RealReportaryID = value.RealReportaryID;
					}
					else
					{
						this._RealReportaryID = default(int);
					}
					this.SendPropertyChanged("RealReportary");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Goods_RealReportaryGoods", Storage="_Goods", ThisKey="GoodsID", OtherKey="GoodsID", IsForeignKey=true)]
		public Goods Goods
		{
			get
			{
				return this._Goods.Entity;
			}
			set
			{
				Goods previousValue = this._Goods.Entity;
				if (((previousValue != value) 
							|| (this._Goods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Goods.Entity = null;
						previousValue.RealReportaryGoods.Remove(this);
					}
					this._Goods.Entity = value;
					if ((value != null))
					{
						value.RealReportaryGoods.Add(this);
						this._GoodsID = value.GoodsID;
					}
					else
					{
						this._GoodsID = default(int);
					}
					this.SendPropertyChanged("Goods");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubDeliever")]
	public partial class SubDeliever : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubDeliverID;
		
		private System.Nullable<int> _DelieverID;
		
		private System.Nullable<int> _SendEmployeeID;
		
		private System.Nullable<int> _SubDeliverStartReporatoryID;
		
		private System.Nullable<int> _ReceiveEmployeeID;
		
		private System.Nullable<int> _SubDeliverDestinationReporatoryID;
		
		private string _SubDeliverType;
		
		private string _SubDeliverTrafficNumber;
		
		private System.Nullable<int> _SubDeliverStatus;
		
		private System.Nullable<System.DateTime> _SubDeliverSendDate;
		
		private System.Nullable<System.DateTime> _SubDeliverReceiveDate;
		
		private EntitySet<SubDeliverGoods> _SubDeliverGoods;
		
		private EntityRef<Deliever> _Deliever;
		
		private EntityRef<TransReporatory> _TransReporatory;
		
		private EntityRef<TransReporatory> _TransReporatory1;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubDeliverIDChanging(int value);
    partial void OnSubDeliverIDChanged();
    partial void OnDelieverIDChanging(System.Nullable<int> value);
    partial void OnDelieverIDChanged();
    partial void OnSendEmployeeIDChanging(System.Nullable<int> value);
    partial void OnSendEmployeeIDChanged();
    partial void OnSubDeliverStartReporatoryIDChanging(System.Nullable<int> value);
    partial void OnSubDeliverStartReporatoryIDChanged();
    partial void OnReceiveEmployeeIDChanging(System.Nullable<int> value);
    partial void OnReceiveEmployeeIDChanged();
    partial void OnSubDeliverDestinationReporatoryIDChanging(System.Nullable<int> value);
    partial void OnSubDeliverDestinationReporatoryIDChanged();
    partial void OnSubDeliverTypeChanging(string value);
    partial void OnSubDeliverTypeChanged();
    partial void OnSubDeliverTrafficNumberChanging(string value);
    partial void OnSubDeliverTrafficNumberChanged();
    partial void OnSubDeliverStatusChanging(System.Nullable<int> value);
    partial void OnSubDeliverStatusChanged();
    partial void OnSubDeliverSendDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSubDeliverSendDateChanged();
    partial void OnSubDeliverReceiveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSubDeliverReceiveDateChanged();
    #endregion
		
		public SubDeliever()
		{
			this._SubDeliverGoods = new EntitySet<SubDeliverGoods>(new Action<SubDeliverGoods>(this.attach_SubDeliverGoods), new Action<SubDeliverGoods>(this.detach_SubDeliverGoods));
			this._Deliever = default(EntityRef<Deliever>);
			this._TransReporatory = default(EntityRef<TransReporatory>);
			this._TransReporatory1 = default(EntityRef<TransReporatory>);
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubDeliverID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubDeliverID
		{
			get
			{
				return this._SubDeliverID;
			}
			set
			{
				if ((this._SubDeliverID != value))
				{
					this.OnSubDeliverIDChanging(value);
					this.SendPropertyChanging();
					this._SubDeliverID = value;
					this.SendPropertyChanged("SubDeliverID");
					this.OnSubDeliverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelieverID", DbType="Int")]
		public System.Nullable<int> DelieverID
		{
			get
			{
				return this._DelieverID;
			}
			set
			{
				if ((this._DelieverID != value))
				{
					if (this._Deliever.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDelieverIDChanging(value);
					this.SendPropertyChanging();
					this._DelieverID = value;
					this.SendPropertyChanged("DelieverID");
					this.OnDelieverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SendEmployeeID", DbType="Int")]
		public System.Nullable<int> SendEmployeeID
		{
			get
			{
				return this._SendEmployeeID;
			}
			set
			{
				if ((this._SendEmployeeID != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSendEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._SendEmployeeID = value;
					this.SendPropertyChanged("SendEmployeeID");
					this.OnSendEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubDeliverStartReporatoryID", DbType="Int")]
		public System.Nullable<int> SubDeliverStartReporatoryID
		{
			get
			{
				return this._SubDeliverStartReporatoryID;
			}
			set
			{
				if ((this._SubDeliverStartReporatoryID != value))
				{
					if (this._TransReporatory1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubDeliverStartReporatoryIDChanging(value);
					this.SendPropertyChanging();
					this._SubDeliverStartReporatoryID = value;
					this.SendPropertyChanged("SubDeliverStartReporatoryID");
					this.OnSubDeliverStartReporatoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiveEmployeeID", DbType="Int")]
		public System.Nullable<int> ReceiveEmployeeID
		{
			get
			{
				return this._ReceiveEmployeeID;
			}
			set
			{
				if ((this._ReceiveEmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiveEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiveEmployeeID = value;
					this.SendPropertyChanged("ReceiveEmployeeID");
					this.OnReceiveEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubDeliverDestinationReporatoryID", DbType="Int")]
		public System.Nullable<int> SubDeliverDestinationReporatoryID
		{
			get
			{
				return this._SubDeliverDestinationReporatoryID;
			}
			set
			{
				if ((this._SubDeliverDestinationReporatoryID != value))
				{
					if (this._TransReporatory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubDeliverDestinationReporatoryIDChanging(value);
					this.SendPropertyChanging();
					this._SubDeliverDestinationReporatoryID = value;
					this.SendPropertyChanged("SubDeliverDestinationReporatoryID");
					this.OnSubDeliverDestinationReporatoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubDeliverType", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string SubDeliverType
		{
			get
			{
				return this._SubDeliverType;
			}
			set
			{
				if ((this._SubDeliverType != value))
				{
					this.OnSubDeliverTypeChanging(value);
					this.SendPropertyChanging();
					this._SubDeliverType = value;
					this.SendPropertyChanged("SubDeliverType");
					this.OnSubDeliverTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubDeliverTrafficNumber", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string SubDeliverTrafficNumber
		{
			get
			{
				return this._SubDeliverTrafficNumber;
			}
			set
			{
				if ((this._SubDeliverTrafficNumber != value))
				{
					this.OnSubDeliverTrafficNumberChanging(value);
					this.SendPropertyChanging();
					this._SubDeliverTrafficNumber = value;
					this.SendPropertyChanged("SubDeliverTrafficNumber");
					this.OnSubDeliverTrafficNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubDeliverStatus", DbType="Int")]
		public System.Nullable<int> SubDeliverStatus
		{
			get
			{
				return this._SubDeliverStatus;
			}
			set
			{
				if ((this._SubDeliverStatus != value))
				{
					this.OnSubDeliverStatusChanging(value);
					this.SendPropertyChanging();
					this._SubDeliverStatus = value;
					this.SendPropertyChanged("SubDeliverStatus");
					this.OnSubDeliverStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubDeliverSendDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SubDeliverSendDate
		{
			get
			{
				return this._SubDeliverSendDate;
			}
			set
			{
				if ((this._SubDeliverSendDate != value))
				{
					this.OnSubDeliverSendDateChanging(value);
					this.SendPropertyChanging();
					this._SubDeliverSendDate = value;
					this.SendPropertyChanged("SubDeliverSendDate");
					this.OnSubDeliverSendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubDeliverReceiveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SubDeliverReceiveDate
		{
			get
			{
				return this._SubDeliverReceiveDate;
			}
			set
			{
				if ((this._SubDeliverReceiveDate != value))
				{
					this.OnSubDeliverReceiveDateChanging(value);
					this.SendPropertyChanging();
					this._SubDeliverReceiveDate = value;
					this.SendPropertyChanged("SubDeliverReceiveDate");
					this.OnSubDeliverReceiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubDeliever_SubDeliverGoods", Storage="_SubDeliverGoods", ThisKey="SubDeliverID", OtherKey="SubDeliverID")]
		public EntitySet<SubDeliverGoods> SubDeliverGoods
		{
			get
			{
				return this._SubDeliverGoods;
			}
			set
			{
				this._SubDeliverGoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Deliever_SubDeliever", Storage="_Deliever", ThisKey="DelieverID", OtherKey="DelieverID", IsForeignKey=true)]
		public Deliever Deliever
		{
			get
			{
				return this._Deliever.Entity;
			}
			set
			{
				Deliever previousValue = this._Deliever.Entity;
				if (((previousValue != value) 
							|| (this._Deliever.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Deliever.Entity = null;
						previousValue.SubDeliever.Remove(this);
					}
					this._Deliever.Entity = value;
					if ((value != null))
					{
						value.SubDeliever.Add(this);
						this._DelieverID = value.DelieverID;
					}
					else
					{
						this._DelieverID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Deliever");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransReporatory_SubDeliever", Storage="_TransReporatory", ThisKey="SubDeliverDestinationReporatoryID", OtherKey="TransReporatoryID", IsForeignKey=true)]
		public TransReporatory TransReporatory
		{
			get
			{
				return this._TransReporatory.Entity;
			}
			set
			{
				TransReporatory previousValue = this._TransReporatory.Entity;
				if (((previousValue != value) 
							|| (this._TransReporatory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransReporatory.Entity = null;
						previousValue.SubDeliever.Remove(this);
					}
					this._TransReporatory.Entity = value;
					if ((value != null))
					{
						value.SubDeliever.Add(this);
						this._SubDeliverDestinationReporatoryID = value.TransReporatoryID;
					}
					else
					{
						this._SubDeliverDestinationReporatoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TransReporatory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransReporatory_SubDeliever1", Storage="_TransReporatory1", ThisKey="SubDeliverStartReporatoryID", OtherKey="TransReporatoryID", IsForeignKey=true)]
		public TransReporatory TransReporatory1
		{
			get
			{
				return this._TransReporatory1.Entity;
			}
			set
			{
				TransReporatory previousValue = this._TransReporatory1.Entity;
				if (((previousValue != value) 
							|| (this._TransReporatory1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransReporatory1.Entity = null;
						previousValue.SubDeliever1.Remove(this);
					}
					this._TransReporatory1.Entity = value;
					if ((value != null))
					{
						value.SubDeliever1.Add(this);
						this._SubDeliverStartReporatoryID = value.TransReporatoryID;
					}
					else
					{
						this._SubDeliverStartReporatoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TransReporatory1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SubDeliever", Storage="_Employee", ThisKey="ReceiveEmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.SubDeliever.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.SubDeliever.Add(this);
						this._ReceiveEmployeeID = value.EmployeeID;
					}
					else
					{
						this._ReceiveEmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SubDeliever1", Storage="_Employee1", ThisKey="SendEmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.SubDeliever1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.SubDeliever1.Add(this);
						this._SendEmployeeID = value.EmployeeID;
					}
					else
					{
						this._SendEmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubDeliverGoods(SubDeliverGoods entity)
		{
			this.SendPropertyChanging();
			entity.SubDeliever = this;
		}
		
		private void detach_SubDeliverGoods(SubDeliverGoods entity)
		{
			this.SendPropertyChanging();
			entity.SubDeliever = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubDeliverGoods")]
	public partial class SubDeliverGoods : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GoodsID;
		
		private int _SubDeliverID;
		
		private int _SubDeliverTotalNumber;
		
		private int _SubDeliverGoodsID;
		
		private EntityRef<SubDeliever> _SubDeliever;
		
		private EntityRef<Goods> _Goods;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGoodsIDChanging(int value);
    partial void OnGoodsIDChanged();
    partial void OnSubDeliverIDChanging(int value);
    partial void OnSubDeliverIDChanged();
    partial void OnSubDeliverTotalNumberChanging(int value);
    partial void OnSubDeliverTotalNumberChanged();
    partial void OnSubDeliverGoodsIDChanging(int value);
    partial void OnSubDeliverGoodsIDChanged();
    #endregion
		
		public SubDeliverGoods()
		{
			this._SubDeliever = default(EntityRef<SubDeliever>);
			this._Goods = default(EntityRef<Goods>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodsID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int GoodsID
		{
			get
			{
				return this._GoodsID;
			}
			set
			{
				if ((this._GoodsID != value))
				{
					if (this._Goods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodsIDChanging(value);
					this.SendPropertyChanging();
					this._GoodsID = value;
					this.SendPropertyChanged("GoodsID");
					this.OnGoodsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubDeliverID", DbType="Int NOT NULL")]
		public int SubDeliverID
		{
			get
			{
				return this._SubDeliverID;
			}
			set
			{
				if ((this._SubDeliverID != value))
				{
					if (this._SubDeliever.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubDeliverIDChanging(value);
					this.SendPropertyChanging();
					this._SubDeliverID = value;
					this.SendPropertyChanged("SubDeliverID");
					this.OnSubDeliverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubDeliverTotalNumber", DbType="Int NOT NULL")]
		public int SubDeliverTotalNumber
		{
			get
			{
				return this._SubDeliverTotalNumber;
			}
			set
			{
				if ((this._SubDeliverTotalNumber != value))
				{
					this.OnSubDeliverTotalNumberChanging(value);
					this.SendPropertyChanging();
					this._SubDeliverTotalNumber = value;
					this.SendPropertyChanged("SubDeliverTotalNumber");
					this.OnSubDeliverTotalNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubDeliverGoodsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubDeliverGoodsID
		{
			get
			{
				return this._SubDeliverGoodsID;
			}
			set
			{
				if ((this._SubDeliverGoodsID != value))
				{
					this.OnSubDeliverGoodsIDChanging(value);
					this.SendPropertyChanging();
					this._SubDeliverGoodsID = value;
					this.SendPropertyChanged("SubDeliverGoodsID");
					this.OnSubDeliverGoodsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubDeliever_SubDeliverGoods", Storage="_SubDeliever", ThisKey="SubDeliverID", OtherKey="SubDeliverID", IsForeignKey=true)]
		public SubDeliever SubDeliever
		{
			get
			{
				return this._SubDeliever.Entity;
			}
			set
			{
				SubDeliever previousValue = this._SubDeliever.Entity;
				if (((previousValue != value) 
							|| (this._SubDeliever.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubDeliever.Entity = null;
						previousValue.SubDeliverGoods.Remove(this);
					}
					this._SubDeliever.Entity = value;
					if ((value != null))
					{
						value.SubDeliverGoods.Add(this);
						this._SubDeliverID = value.SubDeliverID;
					}
					else
					{
						this._SubDeliverID = default(int);
					}
					this.SendPropertyChanged("SubDeliever");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Goods_SubDeliverGoods", Storage="_Goods", ThisKey="GoodsID", OtherKey="GoodsID", IsForeignKey=true)]
		public Goods Goods
		{
			get
			{
				return this._Goods.Entity;
			}
			set
			{
				Goods previousValue = this._Goods.Entity;
				if (((previousValue != value) 
							|| (this._Goods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Goods.Entity = null;
						previousValue.SubDeliverGoods.Remove(this);
					}
					this._Goods.Entity = value;
					if ((value != null))
					{
						value.SubDeliverGoods.Add(this);
						this._GoodsID = value.GoodsID;
					}
					else
					{
						this._GoodsID = default(int);
					}
					this.SendPropertyChanged("Goods");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TranReporatoryGoods")]
	public partial class TranReporatoryGoods : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GoodsID;
		
		private int _TransReporatoryID;
		
		private int _TransNumber;
		
		private int _TransReporatoryGoodsID;
		
		private System.Nullable<int> _DelieverID;
		
		private EntityRef<Deliever> _Deliever;
		
		private EntityRef<TransReporatory> _TransReporatory;
		
		private EntityRef<Goods> _Goods;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGoodsIDChanging(int value);
    partial void OnGoodsIDChanged();
    partial void OnTransReporatoryIDChanging(int value);
    partial void OnTransReporatoryIDChanged();
    partial void OnTransNumberChanging(int value);
    partial void OnTransNumberChanged();
    partial void OnTransReporatoryGoodsIDChanging(int value);
    partial void OnTransReporatoryGoodsIDChanged();
    partial void OnDelieverIDChanging(System.Nullable<int> value);
    partial void OnDelieverIDChanged();
    #endregion
		
		public TranReporatoryGoods()
		{
			this._Deliever = default(EntityRef<Deliever>);
			this._TransReporatory = default(EntityRef<TransReporatory>);
			this._Goods = default(EntityRef<Goods>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodsID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int GoodsID
		{
			get
			{
				return this._GoodsID;
			}
			set
			{
				if ((this._GoodsID != value))
				{
					if (this._Goods.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodsIDChanging(value);
					this.SendPropertyChanging();
					this._GoodsID = value;
					this.SendPropertyChanged("GoodsID");
					this.OnGoodsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransReporatoryID", DbType="Int NOT NULL")]
		public int TransReporatoryID
		{
			get
			{
				return this._TransReporatoryID;
			}
			set
			{
				if ((this._TransReporatoryID != value))
				{
					if (this._TransReporatory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransReporatoryIDChanging(value);
					this.SendPropertyChanging();
					this._TransReporatoryID = value;
					this.SendPropertyChanged("TransReporatoryID");
					this.OnTransReporatoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransNumber", DbType="Int NOT NULL")]
		public int TransNumber
		{
			get
			{
				return this._TransNumber;
			}
			set
			{
				if ((this._TransNumber != value))
				{
					this.OnTransNumberChanging(value);
					this.SendPropertyChanging();
					this._TransNumber = value;
					this.SendPropertyChanged("TransNumber");
					this.OnTransNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransReporatoryGoodsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TransReporatoryGoodsID
		{
			get
			{
				return this._TransReporatoryGoodsID;
			}
			set
			{
				if ((this._TransReporatoryGoodsID != value))
				{
					this.OnTransReporatoryGoodsIDChanging(value);
					this.SendPropertyChanging();
					this._TransReporatoryGoodsID = value;
					this.SendPropertyChanged("TransReporatoryGoodsID");
					this.OnTransReporatoryGoodsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelieverID", DbType="Int")]
		public System.Nullable<int> DelieverID
		{
			get
			{
				return this._DelieverID;
			}
			set
			{
				if ((this._DelieverID != value))
				{
					if (this._Deliever.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDelieverIDChanging(value);
					this.SendPropertyChanging();
					this._DelieverID = value;
					this.SendPropertyChanged("DelieverID");
					this.OnDelieverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Deliever_TranReporatoryGoods", Storage="_Deliever", ThisKey="DelieverID", OtherKey="DelieverID", IsForeignKey=true)]
		public Deliever Deliever
		{
			get
			{
				return this._Deliever.Entity;
			}
			set
			{
				Deliever previousValue = this._Deliever.Entity;
				if (((previousValue != value) 
							|| (this._Deliever.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Deliever.Entity = null;
						previousValue.TranReporatoryGoods.Remove(this);
					}
					this._Deliever.Entity = value;
					if ((value != null))
					{
						value.TranReporatoryGoods.Add(this);
						this._DelieverID = value.DelieverID;
					}
					else
					{
						this._DelieverID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Deliever");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransReporatory_TranReporatoryGoods", Storage="_TransReporatory", ThisKey="TransReporatoryID", OtherKey="TransReporatoryID", IsForeignKey=true)]
		public TransReporatory TransReporatory
		{
			get
			{
				return this._TransReporatory.Entity;
			}
			set
			{
				TransReporatory previousValue = this._TransReporatory.Entity;
				if (((previousValue != value) 
							|| (this._TransReporatory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransReporatory.Entity = null;
						previousValue.TranReporatoryGoods.Remove(this);
					}
					this._TransReporatory.Entity = value;
					if ((value != null))
					{
						value.TranReporatoryGoods.Add(this);
						this._TransReporatoryID = value.TransReporatoryID;
					}
					else
					{
						this._TransReporatoryID = default(int);
					}
					this.SendPropertyChanged("TransReporatory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Goods_TranReporatoryGoods", Storage="_Goods", ThisKey="GoodsID", OtherKey="GoodsID", IsForeignKey=true)]
		public Goods Goods
		{
			get
			{
				return this._Goods.Entity;
			}
			set
			{
				Goods previousValue = this._Goods.Entity;
				if (((previousValue != value) 
							|| (this._Goods.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Goods.Entity = null;
						previousValue.TranReporatoryGoods.Remove(this);
					}
					this._Goods.Entity = value;
					if ((value != null))
					{
						value.TranReporatoryGoods.Add(this);
						this._GoodsID = value.GoodsID;
					}
					else
					{
						this._GoodsID = default(int);
					}
					this.SendPropertyChanged("Goods");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransReporatory")]
	public partial class TransReporatory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransReporatoryID;
		
		private string _TransReporatoryCode;
		
		private string _TransReporatoryName;
		
		private string _TransReporatoryCity;
		
		private EntitySet<Deliever> _Deliever;
		
		private EntitySet<Deliever> _Deliever1;
		
		private EntitySet<SubDeliever> _SubDeliever;
		
		private EntitySet<SubDeliever> _SubDeliever1;
		
		private EntitySet<TranReporatoryGoods> _TranReporatoryGoods;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransReporatoryIDChanging(int value);
    partial void OnTransReporatoryIDChanged();
    partial void OnTransReporatoryCodeChanging(string value);
    partial void OnTransReporatoryCodeChanged();
    partial void OnTransReporatoryNameChanging(string value);
    partial void OnTransReporatoryNameChanged();
    partial void OnTransReporatoryCityChanging(string value);
    partial void OnTransReporatoryCityChanged();
    #endregion
		
		public TransReporatory()
		{
			this._Deliever = new EntitySet<Deliever>(new Action<Deliever>(this.attach_Deliever), new Action<Deliever>(this.detach_Deliever));
			this._Deliever1 = new EntitySet<Deliever>(new Action<Deliever>(this.attach_Deliever1), new Action<Deliever>(this.detach_Deliever1));
			this._SubDeliever = new EntitySet<SubDeliever>(new Action<SubDeliever>(this.attach_SubDeliever), new Action<SubDeliever>(this.detach_SubDeliever));
			this._SubDeliever1 = new EntitySet<SubDeliever>(new Action<SubDeliever>(this.attach_SubDeliever1), new Action<SubDeliever>(this.detach_SubDeliever1));
			this._TranReporatoryGoods = new EntitySet<TranReporatoryGoods>(new Action<TranReporatoryGoods>(this.attach_TranReporatoryGoods), new Action<TranReporatoryGoods>(this.detach_TranReporatoryGoods));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransReporatoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TransReporatoryID
		{
			get
			{
				return this._TransReporatoryID;
			}
			set
			{
				if ((this._TransReporatoryID != value))
				{
					this.OnTransReporatoryIDChanging(value);
					this.SendPropertyChanging();
					this._TransReporatoryID = value;
					this.SendPropertyChanged("TransReporatoryID");
					this.OnTransReporatoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransReporatoryCode", DbType="Char(10)")]
		public string TransReporatoryCode
		{
			get
			{
				return this._TransReporatoryCode;
			}
			set
			{
				if ((this._TransReporatoryCode != value))
				{
					this.OnTransReporatoryCodeChanging(value);
					this.SendPropertyChanging();
					this._TransReporatoryCode = value;
					this.SendPropertyChanged("TransReporatoryCode");
					this.OnTransReporatoryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransReporatoryName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string TransReporatoryName
		{
			get
			{
				return this._TransReporatoryName;
			}
			set
			{
				if ((this._TransReporatoryName != value))
				{
					this.OnTransReporatoryNameChanging(value);
					this.SendPropertyChanging();
					this._TransReporatoryName = value;
					this.SendPropertyChanged("TransReporatoryName");
					this.OnTransReporatoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransReporatoryCity", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string TransReporatoryCity
		{
			get
			{
				return this._TransReporatoryCity;
			}
			set
			{
				if ((this._TransReporatoryCity != value))
				{
					this.OnTransReporatoryCityChanging(value);
					this.SendPropertyChanging();
					this._TransReporatoryCity = value;
					this.SendPropertyChanged("TransReporatoryCity");
					this.OnTransReporatoryCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransReporatory_Deliever", Storage="_Deliever", ThisKey="TransReporatoryID", OtherKey="DelieverStartReporatoryID")]
		public EntitySet<Deliever> Deliever
		{
			get
			{
				return this._Deliever;
			}
			set
			{
				this._Deliever.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransReporatory_Deliever1", Storage="_Deliever1", ThisKey="TransReporatoryID", OtherKey="DelieverDestinationReporatoryID")]
		public EntitySet<Deliever> Deliever1
		{
			get
			{
				return this._Deliever1;
			}
			set
			{
				this._Deliever1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransReporatory_SubDeliever", Storage="_SubDeliever", ThisKey="TransReporatoryID", OtherKey="SubDeliverDestinationReporatoryID")]
		public EntitySet<SubDeliever> SubDeliever
		{
			get
			{
				return this._SubDeliever;
			}
			set
			{
				this._SubDeliever.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransReporatory_SubDeliever1", Storage="_SubDeliever1", ThisKey="TransReporatoryID", OtherKey="SubDeliverStartReporatoryID")]
		public EntitySet<SubDeliever> SubDeliever1
		{
			get
			{
				return this._SubDeliever1;
			}
			set
			{
				this._SubDeliever1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransReporatory_TranReporatoryGoods", Storage="_TranReporatoryGoods", ThisKey="TransReporatoryID", OtherKey="TransReporatoryID")]
		public EntitySet<TranReporatoryGoods> TranReporatoryGoods
		{
			get
			{
				return this._TranReporatoryGoods;
			}
			set
			{
				this._TranReporatoryGoods.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Deliever(Deliever entity)
		{
			this.SendPropertyChanging();
			entity.TransReporatory = this;
		}
		
		private void detach_Deliever(Deliever entity)
		{
			this.SendPropertyChanging();
			entity.TransReporatory = null;
		}
		
		private void attach_Deliever1(Deliever entity)
		{
			this.SendPropertyChanging();
			entity.TransReporatory1 = this;
		}
		
		private void detach_Deliever1(Deliever entity)
		{
			this.SendPropertyChanging();
			entity.TransReporatory1 = null;
		}
		
		private void attach_SubDeliever(SubDeliever entity)
		{
			this.SendPropertyChanging();
			entity.TransReporatory = this;
		}
		
		private void detach_SubDeliever(SubDeliever entity)
		{
			this.SendPropertyChanging();
			entity.TransReporatory = null;
		}
		
		private void attach_SubDeliever1(SubDeliever entity)
		{
			this.SendPropertyChanging();
			entity.TransReporatory1 = this;
		}
		
		private void detach_SubDeliever1(SubDeliever entity)
		{
			this.SendPropertyChanging();
			entity.TransReporatory1 = null;
		}
		
		private void attach_TranReporatoryGoods(TranReporatoryGoods entity)
		{
			this.SendPropertyChanging();
			entity.TransReporatory = this;
		}
		
		private void detach_TranReporatoryGoods(TranReporatoryGoods entity)
		{
			this.SendPropertyChanging();
			entity.TransReporatory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Goods")]
	public partial class Goods : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GoodsID;
		
		private string _GoodsName;
		
		private string _GoodsCode;
		
		private EntitySet<DelieverGoods> _DelieverGoods;
		
		private EntitySet<RealReportaryGoods> _RealReportaryGoods;
		
		private EntitySet<SubDeliverGoods> _SubDeliverGoods;
		
		private EntitySet<TranReporatoryGoods> _TranReporatoryGoods;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGoodsIDChanging(int value);
    partial void OnGoodsIDChanged();
    partial void OnGoodsNameChanging(string value);
    partial void OnGoodsNameChanged();
    partial void OnGoodsCodeChanging(string value);
    partial void OnGoodsCodeChanged();
    #endregion
		
		public Goods()
		{
			this._DelieverGoods = new EntitySet<DelieverGoods>(new Action<DelieverGoods>(this.attach_DelieverGoods), new Action<DelieverGoods>(this.detach_DelieverGoods));
			this._RealReportaryGoods = new EntitySet<RealReportaryGoods>(new Action<RealReportaryGoods>(this.attach_RealReportaryGoods), new Action<RealReportaryGoods>(this.detach_RealReportaryGoods));
			this._SubDeliverGoods = new EntitySet<SubDeliverGoods>(new Action<SubDeliverGoods>(this.attach_SubDeliverGoods), new Action<SubDeliverGoods>(this.detach_SubDeliverGoods));
			this._TranReporatoryGoods = new EntitySet<TranReporatoryGoods>(new Action<TranReporatoryGoods>(this.attach_TranReporatoryGoods), new Action<TranReporatoryGoods>(this.detach_TranReporatoryGoods));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GoodsID
		{
			get
			{
				return this._GoodsID;
			}
			set
			{
				if ((this._GoodsID != value))
				{
					this.OnGoodsIDChanging(value);
					this.SendPropertyChanging();
					this._GoodsID = value;
					this.SendPropertyChanged("GoodsID");
					this.OnGoodsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodsName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GoodsName
		{
			get
			{
				return this._GoodsName;
			}
			set
			{
				if ((this._GoodsName != value))
				{
					this.OnGoodsNameChanging(value);
					this.SendPropertyChanging();
					this._GoodsName = value;
					this.SendPropertyChanged("GoodsName");
					this.OnGoodsNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodsCode", DbType="Char(20) NOT NULL", CanBeNull=false)]
		public string GoodsCode
		{
			get
			{
				return this._GoodsCode;
			}
			set
			{
				if ((this._GoodsCode != value))
				{
					this.OnGoodsCodeChanging(value);
					this.SendPropertyChanging();
					this._GoodsCode = value;
					this.SendPropertyChanged("GoodsCode");
					this.OnGoodsCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Goods_DelieverGoods", Storage="_DelieverGoods", ThisKey="GoodsID", OtherKey="GoodsID")]
		public EntitySet<DelieverGoods> DelieverGoods
		{
			get
			{
				return this._DelieverGoods;
			}
			set
			{
				this._DelieverGoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Goods_RealReportaryGoods", Storage="_RealReportaryGoods", ThisKey="GoodsID", OtherKey="GoodsID")]
		public EntitySet<RealReportaryGoods> RealReportaryGoods
		{
			get
			{
				return this._RealReportaryGoods;
			}
			set
			{
				this._RealReportaryGoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Goods_SubDeliverGoods", Storage="_SubDeliverGoods", ThisKey="GoodsID", OtherKey="GoodsID")]
		public EntitySet<SubDeliverGoods> SubDeliverGoods
		{
			get
			{
				return this._SubDeliverGoods;
			}
			set
			{
				this._SubDeliverGoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Goods_TranReporatoryGoods", Storage="_TranReporatoryGoods", ThisKey="GoodsID", OtherKey="GoodsID")]
		public EntitySet<TranReporatoryGoods> TranReporatoryGoods
		{
			get
			{
				return this._TranReporatoryGoods;
			}
			set
			{
				this._TranReporatoryGoods.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DelieverGoods(DelieverGoods entity)
		{
			this.SendPropertyChanging();
			entity.Goods = this;
		}
		
		private void detach_DelieverGoods(DelieverGoods entity)
		{
			this.SendPropertyChanging();
			entity.Goods = null;
		}
		
		private void attach_RealReportaryGoods(RealReportaryGoods entity)
		{
			this.SendPropertyChanging();
			entity.Goods = this;
		}
		
		private void detach_RealReportaryGoods(RealReportaryGoods entity)
		{
			this.SendPropertyChanging();
			entity.Goods = null;
		}
		
		private void attach_SubDeliverGoods(SubDeliverGoods entity)
		{
			this.SendPropertyChanging();
			entity.Goods = this;
		}
		
		private void detach_SubDeliverGoods(SubDeliverGoods entity)
		{
			this.SendPropertyChanging();
			entity.Goods = null;
		}
		
		private void attach_TranReporatoryGoods(TranReporatoryGoods entity)
		{
			this.SendPropertyChanging();
			entity.Goods = this;
		}
		
		private void detach_TranReporatoryGoods(TranReporatoryGoods entity)
		{
			this.SendPropertyChanging();
			entity.Goods = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _EmployeeNumber;
		
		private int _EmployeeRole;
		
		private string _EmployeeName;
		
		private System.Nullable<int> _EmployeeStatus;
		
		private string _EmployeePhone;
		
		private EntitySet<Deliever> _Deliever;
		
		private EntitySet<SubDeliever> _SubDeliever;
		
		private EntitySet<SubDeliever> _SubDeliever1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnEmployeeNumberChanging(string value);
    partial void OnEmployeeNumberChanged();
    partial void OnEmployeeRoleChanging(int value);
    partial void OnEmployeeRoleChanged();
    partial void OnEmployeeNameChanging(string value);
    partial void OnEmployeeNameChanged();
    partial void OnEmployeeStatusChanging(System.Nullable<int> value);
    partial void OnEmployeeStatusChanged();
    partial void OnEmployeePhoneChanging(string value);
    partial void OnEmployeePhoneChanged();
    #endregion
		
		public Employee()
		{
			this._Deliever = new EntitySet<Deliever>(new Action<Deliever>(this.attach_Deliever), new Action<Deliever>(this.detach_Deliever));
			this._SubDeliever = new EntitySet<SubDeliever>(new Action<SubDeliever>(this.attach_SubDeliever), new Action<SubDeliever>(this.detach_SubDeliever));
			this._SubDeliever1 = new EntitySet<SubDeliever>(new Action<SubDeliever>(this.attach_SubDeliever1), new Action<SubDeliever>(this.detach_SubDeliever1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeNumber", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string EmployeeNumber
		{
			get
			{
				return this._EmployeeNumber;
			}
			set
			{
				if ((this._EmployeeNumber != value))
				{
					this.OnEmployeeNumberChanging(value);
					this.SendPropertyChanging();
					this._EmployeeNumber = value;
					this.SendPropertyChanged("EmployeeNumber");
					this.OnEmployeeNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeRole", DbType="Int NOT NULL")]
		public int EmployeeRole
		{
			get
			{
				return this._EmployeeRole;
			}
			set
			{
				if ((this._EmployeeRole != value))
				{
					this.OnEmployeeRoleChanging(value);
					this.SendPropertyChanging();
					this._EmployeeRole = value;
					this.SendPropertyChanged("EmployeeRole");
					this.OnEmployeeRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this.OnEmployeeNameChanging(value);
					this.SendPropertyChanging();
					this._EmployeeName = value;
					this.SendPropertyChanged("EmployeeName");
					this.OnEmployeeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeStatus", DbType="Int")]
		public System.Nullable<int> EmployeeStatus
		{
			get
			{
				return this._EmployeeStatus;
			}
			set
			{
				if ((this._EmployeeStatus != value))
				{
					this.OnEmployeeStatusChanging(value);
					this.SendPropertyChanging();
					this._EmployeeStatus = value;
					this.SendPropertyChanged("EmployeeStatus");
					this.OnEmployeeStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeePhone", DbType="Char(10)")]
		public string EmployeePhone
		{
			get
			{
				return this._EmployeePhone;
			}
			set
			{
				if ((this._EmployeePhone != value))
				{
					this.OnEmployeePhoneChanging(value);
					this.SendPropertyChanging();
					this._EmployeePhone = value;
					this.SendPropertyChanged("EmployeePhone");
					this.OnEmployeePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Deliever", Storage="_Deliever", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<Deliever> Deliever
		{
			get
			{
				return this._Deliever;
			}
			set
			{
				this._Deliever.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SubDeliever", Storage="_SubDeliever", ThisKey="EmployeeID", OtherKey="ReceiveEmployeeID")]
		public EntitySet<SubDeliever> SubDeliever
		{
			get
			{
				return this._SubDeliever;
			}
			set
			{
				this._SubDeliever.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SubDeliever1", Storage="_SubDeliever1", ThisKey="EmployeeID", OtherKey="SendEmployeeID")]
		public EntitySet<SubDeliever> SubDeliever1
		{
			get
			{
				return this._SubDeliever1;
			}
			set
			{
				this._SubDeliever1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Deliever(Deliever entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Deliever(Deliever entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_SubDeliever(SubDeliever entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_SubDeliever(SubDeliever entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_SubDeliever1(SubDeliever entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_SubDeliever1(SubDeliever entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
	}
}
#pragma warning restore 1591
